[{"F:\\tictactoe\\src\\index.js":"1","F:\\tictactoe\\src\\App.js":"2","F:\\tictactoe\\src\\reportWebVitals.js":"3","F:\\tictactoe\\src\\Components\\Game.js":"4","F:\\tictactoe\\src\\Components\\Board.js":"5","F:\\tictactoe\\src\\Components\\Square.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":194,"mtime":1607343027884,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":1865,"mtime":1607510903726,"results":"11","hashOfConfig":"8"},{"size":893,"mtime":1607510768483,"results":"12","hashOfConfig":"8"},{"size":192,"mtime":1607510794491,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"6xu3kd",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\tictactoe\\src\\index.js",[],["28","29"],"F:\\tictactoe\\src\\App.js",[],"F:\\tictactoe\\src\\reportWebVitals.js",[],"F:\\tictactoe\\src\\Components\\Game.js",["30"],"import React from 'react'\r\nimport Board from './Board'\r\n\r\nexport default class Game extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      xIsNext: true,\r\n      stepNumber: 0,\r\n      history: [\r\n        {squares: Array(9).fill(null)}      \r\n      ],\r\n    } \r\n  } \r\n\r\n  handleClick = (i) => {\r\n    const history = this.state.history\r\n    const current = history[history.length - 1]\r\n    const squares = current.squares\r\n\r\n    const winner = calculateWinner(squares)\r\n\r\n    if(winner || squares[i]) {\r\n      return\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O'\r\n    this.setState({\r\n      history: history.concat({\r\n        squares:squares\r\n      }),\r\n      xIsNext: !this.state.xIsNext,\r\n      stepNumber: history.length\r\n    })\r\n  }\r\n\r\n\r\n  render() {    \r\n    const history = this.state.history\r\n    const current = history[this.state.stepNumber]\r\n    let status\r\n    const winner = calculateWinner(current.squares)\r\n\r\n    if(winner) {\r\n      status = 'Winner is' +\" \"+ winner\r\n    } else {\r\n      status = 'Next Player is ' + (this.state.xIsNext ? 'X' : 'O')\r\n    }\r\n    return(\r\n      <div className= \"game\">\r\n        <div className = \"game-board\">\r\n          <Board clickAction = {(i) => this.handleClick(i)} squares = {current.squares}/>          \r\n        </div>\r\n\r\n        <div className = \"game-info\">\r\n          <div>{status}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction calculateWinner (squares) {\r\n  const possibilities = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ]\r\n\r\n  for(let i = 0; i < possibilities.length; i++) {\r\n    const [a, b, c] = possibilities[i]\r\n    if(squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\r\n      return squares[a]\r\n    }\r\n  }\r\n\r\n  return null\r\n}","F:\\tictactoe\\src\\Components\\Board.js",[],"F:\\tictactoe\\src\\Components\\Square.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":45,"column":28,"nodeType":"37","messageId":"38","endLine":45,"endColumn":29},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation"]